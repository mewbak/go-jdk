// Code generated by "stringer -type=InstKind -trimprefix=Inst"; DO NOT EDIT.

package ir

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[InstInvalid-0]
	_ = x[InstIload-1]
	_ = x[InstLload-2]
	_ = x[InstAload-3]
	_ = x[InstRet-4]
	_ = x[InstIret-5]
	_ = x[InstLret-6]
	_ = x[InstAret-7]
	_ = x[InstCallStatic-8]
	_ = x[InstCallGo-9]
	_ = x[InstIcmp-10]
	_ = x[InstLcmp-11]
	_ = x[InstJump-12]
	_ = x[InstJumpEqual-13]
	_ = x[InstJumpNotEqual-14]
	_ = x[InstJumpGtEq-15]
	_ = x[InstJumpGt-16]
	_ = x[InstJumpLt-17]
	_ = x[InstJumpLtEq-18]
	_ = x[InstImul-19]
	_ = x[InstIdiv-20]
	_ = x[InstIadd-21]
	_ = x[InstLadd-22]
	_ = x[InstFadd-23]
	_ = x[InstIsub-24]
	_ = x[InstIneg-25]
	_ = x[InstLneg-26]
	_ = x[InstDadd-27]
	_ = x[InstConvL2I-28]
	_ = x[InstConvF2I-29]
	_ = x[InstConvD2I-30]
	_ = x[InstConvI2L-31]
	_ = x[InstConvI2B-32]
	_ = x[InstNewBoolArray-33]
	_ = x[InstNewCharArray-34]
	_ = x[InstNewFloatArray-35]
	_ = x[InstNewDoubleArray-36]
	_ = x[InstNewByteArray-37]
	_ = x[InstNewShortArray-38]
	_ = x[InstNewIntArray-39]
	_ = x[InstNewLongArray-40]
	_ = x[InstIntArraySet-41]
	_ = x[InstIntArrayGet-42]
	_ = x[InstArrayLen-43]
}

const _InstKind_name = "InvalidIloadLloadAloadRetIretLretAretCallStaticCallGoIcmpLcmpJumpJumpEqualJumpNotEqualJumpGtEqJumpGtJumpLtJumpLtEqImulIdivIaddLaddFaddIsubInegLnegDaddConvL2IConvF2IConvD2IConvI2LConvI2BNewBoolArrayNewCharArrayNewFloatArrayNewDoubleArrayNewByteArrayNewShortArrayNewIntArrayNewLongArrayIntArraySetIntArrayGetArrayLen"

var _InstKind_index = [...]uint16{0, 7, 12, 17, 22, 25, 29, 33, 37, 47, 53, 57, 61, 65, 74, 86, 94, 100, 106, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 157, 164, 171, 178, 185, 197, 209, 222, 236, 248, 261, 272, 284, 295, 306, 314}

func (i InstKind) String() string {
	if i < 0 || i >= InstKind(len(_InstKind_index)-1) {
		return "InstKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _InstKind_name[_InstKind_index[i]:_InstKind_index[i+1]]
}
