package jclass

// AccessFlags is a mask of flags used to denote access permissions to and properties
// of this class or interface.
//
// The interpretation of each flag, when set, is specified below:
//	ACC_PUBLIC      0x0001  Declared public; may be accessed from outside its package.
//	ACC_FINAL       0x0010  Declared final; no subclasses allowed.
//	ACC_SUPER       0x0020  Treat superclass methods specially when invoked by the invokespecial instruction.
//	ACC_INTERFACE   0x0200  Is an interface, not a class.
//	ACC_ABSTRACT    0x0400  Declared abstract; must not be instantiated.
//	ACC_SYNTHETIC   0x1000  Declared synthetic; not present in the source code.
//	ACC_ANNOTATION  0x2000  Declared as an annotation type.
//	ACC_ENUM        0x4000  Declared as an enum type.
//	ACC_MODULE      0x8000  Is a module, not a class or interface.
type AccessFlags uint16

func (af AccessFlags) IsPublic() bool     { return af&0x0001 != 0 }
func (af AccessFlags) IsFinal() bool      { return af&0x0010 != 0 }
func (af AccessFlags) IsSuper() bool      { return af&0x0020 != 0 }
func (af AccessFlags) IsInterface() bool  { return af&0x0200 != 0 }
func (af AccessFlags) IsAbstract() bool   { return af&0x0400 != 0 }
func (af AccessFlags) IsSynthetic() bool  { return af&0x1000 != 0 }
func (af AccessFlags) IsAnnotation() bool { return af&0x2000 != 0 }
func (af AccessFlags) IsEnum() bool       { return af&0x4000 != 0 }
func (af AccessFlags) IsModule() bool     { return af&0x8000 != 0 }

// MethodAccessFlags is a mask of flags used to denote access permission to and properties
// of this method.
//
// The interpretation of each flag, when set, is specified below:
//	ACC_PUBLIC        0x0001  Declared public; may be accessed from outside its package.
//	ACC_PRIVATE       0x0002  Declared private; accessible only within the defining class and other classes belonging to the same nest.
//	ACC_PROTECTED     0x0004  Declared protected; may be accessed within subclasses.
//	ACC_STATIC        0x0008  Declared static.
//	ACC_FINAL         0x0010  Declared final; must not be overridden.
//	ACC_SYNCHRONIZED  0x0020  Declared synchronized; invocation is wrapped by a monitor use.
//	ACC_BRIDGE        0x0040  A bridge method, generated by the compiler.
//	ACC_VARARGS       0x0080  Declared with variable number of arguments.
//	ACC_NATIVE        0x0100  Declared native; implemented in a language other than the Java programming language.
//	ACC_ABSTRACT      0x0400  Declared abstract; no implementation is provided.
//	ACC_STRICT        0x0800  Declared strictfp; floating-point mode is FP-strict.
//	ACC_SYNTHETIC     0x1000  Declared synthetic; not present in the source code.
type MethodAccessFlags uint16

func (af MethodAccessFlags) IsPublic() bool       { return af&0x0001 != 0 }
func (af MethodAccessFlags) IsPrivate() bool      { return af&0x0002 != 0 }
func (af MethodAccessFlags) IsProtected() bool    { return af&0x0004 != 0 }
func (af MethodAccessFlags) IsStatic() bool       { return af&0x0008 != 0 }
func (af MethodAccessFlags) IsFinal() bool        { return af&0x0010 != 0 }
func (af MethodAccessFlags) IsSynchronized() bool { return af&0x0020 != 0 }
func (af MethodAccessFlags) IsBridge() bool       { return af&0x0040 != 0 }
func (af MethodAccessFlags) IsVarargs() bool      { return af&0x0080 != 0 }
func (af MethodAccessFlags) IsNative() bool       { return af&0x0100 != 0 }
func (af MethodAccessFlags) IsAbstract() bool     { return af&0x0400 != 0 }
func (af MethodAccessFlags) IsStrict() bool       { return af&0x0800 != 0 }
func (af MethodAccessFlags) IsSynthetic() bool    { return af&0x1000 != 0 }
